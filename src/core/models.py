import uuid
from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional, Any, Dict, List

# Dataclasses are a great way to create classes that are primarily used
# for storing data. They handle a lot of boilerplate code for us.

@dataclass
class Source:
    """
    Represents a data source from which we will ingest content.
    This model provides a structured way to manage different types of sources.
    """
    name: str  # The human-readable name of the source (e.g., "Marques Brownlee")
    url: str   # The URL of the source (e.g., a YouTube channel URL or subreddit URL)
    type: str  # The type of source (e.g., "youtube", "reddit", "rss")
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    ingested_at: Optional[datetime] = None  # The timestamp of the last successful ingestion


@dataclass
class Post:
    """
    Represents a single piece of content ingested from a Source.
    This could be a Reddit post, a YouTube video transcript, or a blog article.
    """
    source_id: str         # The ID of the source this post came from
    title: str
    content: str           # The main text content of the post
    author: Optional[str] = None
    url: Optional[str] = None
    created_at: Optional[datetime] = None
    ingested_at: datetime = field(default_factory=datetime.utcnow)
    # We use a mutable default for 'metadata' with default_factory
    # to ensure each instance gets its own dictionary.
    metadata: Dict[str, Any] = field(default_factory=dict)
    id: str = field(default_factory=lambda: str(uuid.uuid4()))


@dataclass
class Insight:
    """
    Represents a final, analyzed insight or trend generated by the engine.
    This is the core output of our application.
    """
    title: str
    summary: str
    # The source_ids field links the insight back to the original posts.
    source_ids: List[str] = field(default_factory=list)
    generated_at: datetime = field(default_factory=datetime.utcnow)
    # Additional key takeaways or data points from the analysis.
    key_points: List[str] = field(default_factory=list)
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
